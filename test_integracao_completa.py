#!/usr/bin/env python3
"""
Teste de integra√ß√£o completa - verificar se a fam√≠lia da laje aparece no or√ßamento
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from advanced_product_selector import AdvancedProductSelector
from calculator import PoolCalculator

def test_budget_integration_with_laje():
    """Testa integra√ß√£o completa incluindo a fam√≠lia da laje"""
    
    print("=== TESTE INTEGRA√á√ÉO COMPLETA: FAM√çLIA DA LAJE ===\n")
    
    # Inicializar componentes
    calculator = PoolCalculator()
    selector = AdvancedProductSelector()
    
    # Simular dados completos
    dimensions = {
        'comprimento': 8.0,
        'largura': 4.0,
        'prof_min': 1.0,
        'prof_max': 2.0,
        'volume': 48.0
    }
    
    # Calcular m√©tricas
    metrics = calculator.calculate_all_metrics(
        dimensions['comprimento'],
        dimensions['largura'],
        dimensions['prof_min'],
        dimensions['prof_max']
    )
    
    # Respostas completas COM laje
    answers = {
        'acesso': 'facil',
        'forma': 'retangular',
        'tipo_piscina': 'skimmer',
        'revestimento': 'vinil',
        'localizacao': 'exterior',
        'luz': 'led',
        'tratamento_agua': 'cloro_manual',
        'domotica': False,
        'aquecimento': 'nao',
        # LAJE
        'havera_laje': 'sim',
        'laje_m2': 50.0,
        'laje_espessura': 0.15,
        'revestimento_laje': 'sim',
        'material_revestimento': 'travertino_turco'
    }
    
    print("--- TESTE: Gera√ß√£o de or√ßamento completo ---")
    
    # Gerar or√ßamento completo
    budget = selector.generate_budget(answers, metrics, dimensions)
    
    print(f"Fam√≠lias encontradas: {list(budget.get('families', {}).keys())}")
    print(f"Totais por fam√≠lia: {budget.get('family_totals', {})}")
    print()
    
    # Verificar se a fam√≠lia da laje est√° presente
    families = budget.get('families', {})
    family_totals = budget.get('family_totals', {})
    
    if 'construcao_laje' in families:
        print("‚úÖ Fam√≠lia 'construcao_laje' ENCONTRADA nas families")
        laje_products = families['construcao_laje']
        print(f"   Produtos na fam√≠lia: {len(laje_products)}")
        
        for product_id, product in laje_products.items():
            if product['quantity'] > 0:
                subtotal = product['price'] * product['quantity']
                print(f"   - {product['name'][:50]}...")
                print(f"     Qtd: {product['quantity']} | Pre√ßo: ‚Ç¨{product['price']} | Subtotal: ‚Ç¨{subtotal}")
        
        if 'construcao_laje' in family_totals:
            print(f"‚úÖ Total da fam√≠lia: ‚Ç¨{family_totals['construcao_laje']}")
        else:
            print("‚ùå Total da fam√≠lia N√ÉO encontrado")
            
    else:
        print("‚ùå Fam√≠lia 'construcao_laje' N√ÉO ENCONTRADA")
        print("   Verificando se produtos foram gerados...")
        
        # Testar diretamente a fun√ß√£o
        laje_products = selector._select_laje_products(answers, dimensions)
        print(f"   Produtos diretos da fun√ß√£o: {len(laje_products)}")
        
        if len(laje_products) > 0:
            print("   ‚ö†Ô∏è  Fun√ß√£o gera produtos, mas n√£o aparecem no budget!")
        else:
            print("   ‚ùå Fun√ß√£o n√£o gera produtos")
    
    print()
    
    # Verificar display mapping
    display_map = budget.get('family_display_map', {})
    if 'construcao_laje' in display_map:
        print(f"‚úÖ Display mapping: construcao_laje -> '{display_map['construcao_laje']}'")
    else:
        print("‚ùå Display mapping para 'construcao_laje' n√£o encontrado")
    
    print()
    
    # Teste SEM laje para compara√ß√£o
    print("--- TESTE: Sem laje para compara√ß√£o ---")
    answers_sem_laje = answers.copy()
    answers_sem_laje['havera_laje'] = 'nao'
    
    budget_sem_laje = selector.generate_budget(answers_sem_laje, metrics, dimensions)
    families_sem_laje = budget_sem_laje.get('families', {})
    
    if 'construcao_laje' in families_sem_laje:
        laje_empty = families_sem_laje['construcao_laje']
        if len(laje_empty) == 0:
            print("‚úÖ Sem laje: fam√≠lia vazia corretamente")
        else:
            print(f"‚ùå Sem laje: fam√≠lia tem {len(laje_empty)} produtos (deveria estar vazia)")
    else:
        print("‚úÖ Sem laje: fam√≠lia n√£o presente (correto)")
    
    print("\n=== RESUMO FINAL ===")
    
    has_family = 'construcao_laje' in families
    has_products = has_family and len(families.get('construcao_laje', {})) > 0
    has_total = 'construcao_laje' in family_totals
    has_display = 'construcao_laje' in display_map
    
    print(f"‚úì Fam√≠lia presente no budget: {'SIM' if has_family else 'N√ÉO'}")
    print(f"‚úì Produtos na fam√≠lia: {'SIM' if has_products else 'N√ÉO'}")
    print(f"‚úì Total calculado: {'SIM' if has_total else 'N√ÉO'}")
    print(f"‚úì Display mapping: {'SIM' if has_display else 'N√ÉO'}")
    
    if all([has_family, has_products, has_total, has_display]):
        print("\nüéâ INTEGRA√á√ÉO COMPLETA: SUCESSO!")
        print("A fam√≠lia da laje deve aparecer no or√ßamento web.")
    else:
        print("\n‚ùå PROBLEMAS NA INTEGRA√á√ÉO")
        print("A fam√≠lia pode n√£o aparecer corretamente no or√ßamento web.")
    
    return budget

if __name__ == "__main__":
    test_budget_integration_with_laje()
